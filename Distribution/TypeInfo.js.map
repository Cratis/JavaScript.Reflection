{"version":3,"sources":["TypeInfo.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;AAKA;AACA;;AAEA,IAAM,SAAS,IAAI,OAAJ,EAAf;AACA,IAAM,QAAQ,IAAI,OAAJ,EAAd;;AAEA,IAAI,UAAU,SAAV,OAAU,CAAC,KAAD,EAAW;AACrB,QAAI,gBAAgB,oBAApB;AACA,QAAI,UAAW,aAAD,CAAgB,IAAhB,CAAsB,KAAD,CAAQ,WAAR,CAAoB,QAApB,EAArB,CAAd;AACA,QAAI,OAAQ,WAAW,QAAQ,MAAR,GAAiB,CAA7B,GAAkC,QAAQ,CAAR,CAAlC,GAA+C,EAA1D;AACA,UAAM,GAAN,CAAU,KAAV,EAAiB,IAAjB;AACH,CALD;;AAOA;;;;IAGa,Q,WAAA,Q;AACT,sBAAY,KAAZ,EAAmB;AAAA;;AACf,eAAO,GAAP,CAAW,IAAX,EAAiB,KAAjB;AACA,gBAAQ,KAAR;AACH;;;;4BAEU;AACP,gBAAI,QAAQ,OAAO,GAAP,CAAW,IAAX,CAAZ;AACA,mBAAO,MAAM,GAAN,CAAU,KAAV,CAAP;AACH;;;;;;AAGL,IAAI,CAAC,OAAO,SAAP,CAAiB,QAAtB,EAAgC;AAC5B,WAAO,cAAP,CAAsB,OAAO,SAA7B,EAAwC,UAAxC,EAAoD;AAChD,aAAK,eAAW;AACZ,gBAAI,KAAK,SAAT,EAAoB,OAAO,KAAK,SAAZ;AACpB,gBAAI,WAAW,IAAI,QAAJ,CAAa,IAAb,CAAf;AACA,iBAAK,SAAL,GAAiB,QAAjB;AACA,mBAAO,QAAP;AACH,SAN+C;AAOhD,sBAAc;AAPkC,KAApD;AASH;;AAID","file":"TypeInfo.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Einar Ingebrigtsen. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// Based on information from: http://stackoverflow.com/questions/332422/how-do-i-get-the-name-of-an-objects-type-in-javascript\n// Checking types : http://tobyho.com/2011/01/28/checking-types-in-javascript/\n\nconst _owner = new WeakMap();\nconst _name = new WeakMap();\n\nlet setName = (owner) => {\n    let funcNameRegex = /function (.{1,})\\(/;\n    let results = (funcNameRegex).exec((owner).constructor.toString());\n    let name = (results && results.length > 1) ? results[1] : \"\";\n    _name.set(owner, name);\n}\n\n/**\n * Represents information about a type\n */\nexport class TypeInfo {\n    constructor(owner) {\n        _owner.set(this, owner);\n        setName(owner);\n    }\n\n    get name() {\n        let owner = _owner.get(this);\n        return _name.get(owner);\n    }\n}\n\nif (!Object.prototype.typeInfo) {\n    Object.defineProperty(Object.prototype, \"typeInfo\", {\n        get: function() {\n            if (this._typeInfo) return this._typeInfo;\n            let typeInfo = new TypeInfo(this);\n            this._typeInfo = typeInfo;\n            return typeInfo;\n        },\n        configurable: false\n    });\n}\n\n\n\n/*\nObject.prototype.getConstructorName = function () {\n   var str = (this.prototype ? this.prototype.constructor : this.constructor).toString();\n   var cname = str.match(/function\\s(\\w*)/)[1];\n   var aliases = [\"\", \"anonymous\", \"Anonymous\"];\n   return aliases.indexOf(cname) > -1 ? \"Function\" : cname;\n}\n\nObject.prototype.getName = function() { \n   var funcNameRegex = /function (.{1,})\\(/;\n   var results = (funcNameRegex).exec((this).constructor.toString());\n   return (results && results.length > 1) ? results[1] : \"\";\n};\n\n\nif (!Object.prototype.getClassName) {\n    Object.prototype.getClassName = function () {\n        return Object.prototype.toString.call(this).match(/^\\[object\\s(.*)\\]$/)[1];\n    }\n}\n\nfunction isInstance(obj, type) {\n    var ret = false,\n    isTypeAString = getType(type) == \"String\",\n    functionConstructor, i, l, typeArray, context;\n    if (!isTypeAString && getType(type) != \"Function\") {\n        throw new TypeError(\"type argument must be a string or function\");\n    }\n    if (obj !== undefined && obj !== null && obj.constructor) {\n        //get the Function constructor\n        functionConstructor = obj.constructor;\n        while (functionConstructor != functionConstructor.constructor) {\n            functionConstructor = functionConstructor.constructor;\n        }\n        //get the object's window\n        context = functionConstructor == Function ? self : functionConstructor(\"return window\")();\n        //get the constructor for the type\n        if (isTypeAString) {\n            //type is a string so we'll build the context (window.Array or window.some.Type)\n            for (typeArray = type.split(\".\"), i = 0, l = typeArray.length; i < l && context; i++) {\n                context = context[typeArray[i]];\n            }\n        } else {\n            //type is a function so execute the function passing in the object's window\n            //the return should be a constructor\n            context = type(context);\n        }\n        //check if the object is an instance of the constructor\n        if (context) {\n            ret = obj instanceof context;\n            if (!ret && (type == \"Number\" || type == \"String\" || type == \"Boolean\")) {\n                ret = obj.constructor == context\n            }\n        }\n    }\n    return ret;\n}\n*/"],"sourceRoot":"../Source"}